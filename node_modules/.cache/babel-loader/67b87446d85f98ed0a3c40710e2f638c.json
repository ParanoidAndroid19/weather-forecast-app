{"ast":null,"code":"import _regeneratorRuntime from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import'./CityInput.css';import Switch from\"react-switch\";var CityInput=/*#__PURE__*/function(_React$Component){_inherits(CityInput,_React$Component);var _super=_createSuper(CityInput);function CityInput(props){var _this;_classCallCheck(this,CityInput);_this=_super.call(this,props);_this.state={checked:false,units:'metric'};// this.handleChange = this.handleChange.bind(this);\nreturn _this;}// handleChange(checked) {\n//   var deg = ''\n//   if(checked === false) { deg = 'metric'}\n//   else { deg = 'imperial' }\n//\n//   this.setState({ checked,\n//     units: deg\n//   });\n//\n//   if(this.props.city){\n//     // API is called only if the city is defined\n//     if (await this.props.makeApiCall(this.props.city, this.state.units)) e.target.placeholder = 'Enter a City...';\n//     else e.target.placeholder = 'Something went wrong, try again...';\n//   }\n//\n// }\n_createClass(CityInput,[{key:\"render\",value:function render(){var _this2=this;// console.log(this.state.units)\n// here e corresponds to the input box (e.target.value) and the key pressed (e.keyCode)\nvar onKlickHandler=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var eventKey,city,units;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.persist();//I don't know what tf is this\n//both .which and .keyCode do the samething, but some browsers support only one. So here if e.which is true then use that, else use e.keyCode\neventKey=e.which?e.which:e.keyCode;//user input city\ncity=e.target.value;units=_this2.state.units;// check if input contains only letters after Enter was pressed, 13 is the code for enter key\nif(!(eventKey===13)){_context.next=19;break;}if(!/^[a-zA-ZäöüÄÖÜß ]+$/.test(city)){_context.next=16;break;}// adding the className loading so that the loading gif is displayed when api call is being made\ne.target.classList.add('loading');// if api call returns true, else\n_context.next=9;return _this2.props.makeApiCall(city,units);case 9:if(!_context.sent){_context.next=13;break;}e.target.placeholder='Enter a City...';_context.next=14;break;case 13:e.target.placeholder='City was not found, try again...';case 14:_context.next=17;break;case 16:// if input has any numbers\ne.target.placeholder='Please enter a valid city name...';case 17:e.target.classList.remove('loading');e.target.value='';//making the input box value empty again\ncase 19:case\"end\":return _context.stop();}}},_callee);}));return function onKlickHandler(_x){return _ref.apply(this,arguments);};}();var handleChange=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(checked){var deg;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:deg='';if(checked===false){deg='metric';}else{deg='imperial';}_this2.setState({checked:checked,units:deg});// this.props.units = deg\n// console.log(deg)\n// console.log(this.props.city)\nif(!_this2.props.city){_context2.next=11;break;}_context2.next=6;return _this2.props.makeApiCall(_this2.props.city,deg);case 6:if(!_context2.sent){_context2.next=10;break;}console.log(\"API call made successfully\");_context2.next=11;break;case 10:console.log('Something went wrong, try again...');case 11:case\"end\":return _context2.stop();}}},_callee2);}));return function handleChange(_x2){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{className:\"city-input\",type:\"text\",placeholder:\"Enter a City...\",onKeyPress:onKlickHandler}),/*#__PURE__*/React.createElement(\"label\",null,/*#__PURE__*/React.createElement(\"span\",null,\"C\"),/*#__PURE__*/React.createElement(Switch,{onChange:handleChange,checked:this.state.checked,className:\"react-switch\"}),/*#__PURE__*/React.createElement(\"span\",null,\"F\")));}}]);return CityInput;}(React.Component);export default CityInput;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/weather/src/components/CityInput.js"],"names":["React","Switch","CityInput","props","state","checked","units","onKlickHandler","e","persist","eventKey","which","keyCode","city","target","value","test","classList","add","makeApiCall","placeholder","remove","handleChange","deg","setState","console","log","Component"],"mappings":"m+BAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,iBAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,C,GAEMC,CAAAA,S,kHACJ,mBAAYC,KAAZ,CAAkB,2CAChB,uBAAMA,KAAN,EAEA,MAAKC,KAAL,CAAa,CACXC,OAAO,CAAE,KADE,CAEXC,KAAK,CAAE,QAFI,CAAb,CAKA;AARgB,aASjB,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6DAES,iBACP;AACA;AACA,GAAMC,CAAAA,cAAc,0FAAG,iBAAMC,CAAN,0IACrBA,CAAC,CAACC,OAAF,GAAa;AAEb;AACMC,QAJe,CAIJF,CAAC,CAACG,KAAF,CAAUH,CAAC,CAACG,KAAZ,CAAoBH,CAAC,CAACI,OAJlB,CAMrB;AACMC,IAPe,CAORL,CAAC,CAACM,MAAF,CAASC,KAPD,CAQfT,KARe,CAQP,MAAI,CAACF,KAAL,CAAWE,KARJ,CAUrB;AAVqB,KAWjBI,QAAQ,GAAK,EAXI,+BAaf,sBAAsBM,IAAtB,CAA2BH,IAA3B,CAbe,0BAcjB;AACAL,CAAC,CAACM,MAAF,CAASG,SAAT,CAAmBC,GAAnB,CAAuB,SAAvB,EAEA;AAjBiB,sBAkBP,CAAA,MAAI,CAACf,KAAL,CAAWgB,WAAX,CAAuBN,IAAvB,CAA6BP,KAA7B,CAlBO,mDAkB8BE,CAAC,CAACM,MAAF,CAASM,WAAT,CAAuB,iBAAvB,CAlB9B,+BAmBZZ,CAAC,CAACM,MAAF,CAASM,WAAT,CAAuB,kCAAvB,CAnBY,uCAqBnB;AACKZ,CAAC,CAACM,MAAF,CAASM,WAAT,CAAuB,mCAAvB,CAtBc,QAwBnBZ,CAAC,CAACM,MAAF,CAASG,SAAT,CAAmBI,MAAnB,CAA0B,SAA1B,EACAb,CAAC,CAACM,MAAF,CAASC,KAAT,CAAiB,EAAjB,CAAqB;AAzBF,uDAAH,kBAAdR,CAAAA,cAAc,4CAApB,CA6BA,GAAMe,CAAAA,YAAY,2FAAG,kBAAMjB,OAAN,8HACfkB,GADe,CACT,EADS,CAEnB,GAAGlB,OAAO,GAAK,KAAf,CAAsB,CAAEkB,GAAG,CAAG,QAAN,CAAe,CAAvC,IACK,CAAEA,GAAG,CAAG,UAAN,CAAkB,CAEzB,MAAI,CAACC,QAAL,CAAc,CAAEnB,OAAO,CAAPA,OAAF,CACZC,KAAK,CAAEiB,GADK,CAAd,EAIA;AAEA;AACA;AAZmB,IAchB,MAAI,CAACpB,KAAL,CAAWU,IAdK,kDAgBP,CAAA,MAAI,CAACV,KAAL,CAAWgB,WAAX,CAAuB,MAAI,CAAChB,KAAL,CAAWU,IAAlC,CAAwCU,GAAxC,CAhBO,qDAgBuCE,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAhBvC,gCAiBZD,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAjBY,yDAAH,kBAAZJ,CAAAA,YAAY,8CAAlB,CAqBA,mBACE,4CACA,6BACE,SAAS,CAAC,YADZ,CAEE,IAAI,CAAC,MAFP,CAGE,WAAW,CAAC,iBAHd,CAIE,UAAU,CAAEf,cAJd,EADA,cAOA,8CACE,oCADF,cAEE,oBAAC,MAAD,EACE,QAAQ,CAAEe,YADZ,CAEE,OAAO,CAAE,KAAKlB,KAAL,CAAWC,OAFtB,CAGE,SAAS,CAAC,cAHZ,EAFF,cAOE,oCAPF,CAPA,CADF,CAoBD,C,uBAtGqBL,KAAK,CAAC2B,S,EAyG9B,cAAezB,CAAAA,SAAf","sourcesContent":["import React from 'react';\nimport './CityInput.css';\nimport Switch from \"react-switch\";\n\nclass CityInput extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      checked: false,\n      units: 'metric'\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  // handleChange(checked) {\n  //   var deg = ''\n  //   if(checked === false) { deg = 'metric'}\n  //   else { deg = 'imperial' }\n  //\n  //   this.setState({ checked,\n  //     units: deg\n  //   });\n  //\n  //   if(this.props.city){\n  //     // API is called only if the city is defined\n  //     if (await this.props.makeApiCall(this.props.city, this.state.units)) e.target.placeholder = 'Enter a City...';\n  //     else e.target.placeholder = 'Something went wrong, try again...';\n  //   }\n  //\n  // }\n\n  render() {\n    // console.log(this.state.units)\n    // here e corresponds to the input box (e.target.value) and the key pressed (e.keyCode)\n    const onKlickHandler = async e => {\n      e.persist(); //I don't know what tf is this\n\n      //both .which and .keyCode do the samething, but some browsers support only one. So here if e.which is true then use that, else use e.keyCode\n      const eventKey = e.which ? e.which : e.keyCode;\n\n      //user input city\n      const city = e.target.value;\n      const units = this.state.units\n\n      // check if input contains only letters after Enter was pressed, 13 is the code for enter key\n      if (eventKey === 13) {\n        // if input consists of only letters\n        if (/^[a-zA-ZäöüÄÖÜß ]+$/.test(city)) {\n          // adding the className loading so that the loading gif is displayed when api call is being made\n          e.target.classList.add('loading');\n\n          // if api call returns true, else\n          if (await this.props.makeApiCall(city, units)) e.target.placeholder = 'Enter a City...';\n          else e.target.placeholder = 'City was not found, try again...';\n        }\n        // if input has any numbers\n        else e.target.placeholder = 'Please enter a valid city name...';\n\n        e.target.classList.remove('loading');\n        e.target.value = ''; //making the input box value empty again\n      }\n    };\n\n    const handleChange = async checked => {\n      var deg = ''\n      if(checked === false) { deg = 'metric'}\n      else { deg = 'imperial' }\n\n      this.setState({ checked,\n        units: deg\n      });\n\n      // this.props.units = deg\n\n      // console.log(deg)\n      // console.log(this.props.city)\n\n      if(this.props.city){\n        // API is called only if the city is defined\n        if (await this.props.makeApiCall(this.props.city, deg)) console.log(\"API call made successfully\")\n        else console.log('Something went wrong, try again...');\n      }\n    };\n\n    return (\n      <div>\n      <input\n        className='city-input'\n        type='text'\n        placeholder='Enter a City...'\n        onKeyPress={onKlickHandler}\n      />\n      <label>\n        <span>C</span>\n        <Switch\n          onChange={handleChange}\n          checked={this.state.checked}\n          className=\"react-switch\"\n        />\n        <span>F</span>\n      </label>\n      </div>\n    );\n\n  }\n}\n\nexport default CityInput;\n"]},"metadata":{},"sourceType":"module"}