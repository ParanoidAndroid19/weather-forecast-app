{"ast":null,"code":"var _jsxFileName = \"/Users/simranbhake/Desktop/ProjectProgress/weather/src/App.js\";\nimport React from 'react';\nimport './App.css'; // git project https://github.com/erikflowers/weather-icons\n\nimport 'weather-icons/css/weather-icons.css';\nconst API_KEY = \"ef7b3e775066b56ae79afbd0b3068de3\";\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.props.getWeather,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"city\",\n      placeholder: \"City...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"Get Weather\"));\n  }\n\n} // <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n\n\nclass Weather extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, this.props.temperature);\n  }\n\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getWeather = async e => {\n      e.preventDefault(); // gets the user input value typed in city box\n\n      const city = e.target.elements.city.value; // const country = e.target.elements.country.value;\n      // `` is used instead of \"\" so that we can use ${} to specify our own API key, here we are just making a call to the specific URL\n\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${API_KEY}&units=metric`); // converting the response to JSON format, converts the data got from API to a readable format\n\n      const data = await api_call.json();\n      console.log(data); // this.setState({\n      //   temperature: data.main.temp,\n      //   city: data.name,\n      //   country: data.sys.country,\n      //   humidity: data.main.humidity,\n      //   description: data.weather[0].description,\n      //   error: \"\"\n      // });\n    };\n\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"Works?\"), /*#__PURE__*/React.createElement(\"i\", {\n      className: \"wi wi-day-lightning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      getWeather: this.getWeather,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }));\n  }\n\n} // <Weather\n//   temperature = {this.state.temperature}\n//   city = {this.state.city}\n//   country = {this.state.country}\n//   humidity = {this.state.humidity}\n//   description = {this.state.description}\n//   error = {this.state.error}\n// />\n\n\nexport default App;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/weather/src/App.js"],"names":["React","API_KEY","Form","Component","constructor","props","render","getWeather","Weather","temperature","App","e","preventDefault","city","target","elements","value","api_call","fetch","data","json","console","log","state","undefined","country","humidity","description","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CAEA;;AACA,OAAO,qCAAP;AAEA,MAAMC,OAAO,GAAG,kCAAhB;;AAGA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAM,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,UAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,WAAW,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHF,CADF;AAOD;;AAZgC,C,CAcnC;;;AAEA,MAAMC,OAAN,SAAsBR,KAAK,CAACG,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKD,KAAL,CAAWI,WADd,CADF;AAKD;;AAXmC;;AActC,MAAMC,GAAN,SAAkBV,KAAK,CAACG,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAalBE,UAbkB,GAaL,MAAOI,CAAP,IAAa;AACxBA,MAAAA,CAAC,CAACC,cAAF,GADwB,CAGxB;;AACA,YAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAApC,CAJwB,CAKxB;AAEA;;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sDAAqDL,IAAK,UAASZ,OAAQ,eAA7E,CAA5B,CARwB,CAUxB;;AACA,YAAMkB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAbwB,CAexB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KApCiB;;AAGhB,SAAKI,KAAL,GAAa;AACXd,MAAAA,WAAW,EAAEe,SADF;AAEXX,MAAAA,IAAI,EAAEW,SAFK;AAGXC,MAAAA,OAAO,EAAED,SAHE;AAIXE,MAAAA,QAAQ,EAAEF,SAJC;AAKXG,MAAAA,WAAW,EAAEH,SALF;AAMXI,MAAAA,KAAK,EAAEJ;AANI,KAAb;AAQD;;AA2BDlB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAG,MAAA,SAAS,EAAC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAE,KAAKC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAQD;;AAhD+B,C,CAmDlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeG,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// git project https://github.com/erikflowers/weather-icons\nimport 'weather-icons/css/weather-icons.css';\n\nconst API_KEY = \"ef7b3e775066b56ae79afbd0b3068de3\";\n\n\nclass Form extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render() {\n    return (\n      <form onSubmit={this.props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n\n        <button>Get Weather</button>\n      </form>\n    )\n  }\n}\n// <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\n\nclass Weather extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.temperature}\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    // gets the user input value typed in city box\n    const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    // `` is used instead of \"\" so that we can use ${} to specify our own API key, here we are just making a call to the specific URL\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${API_KEY}&units=metric`);\n\n    // converting the response to JSON format, converts the data got from API to a readable format\n    const data = await api_call.json();\n\n    console.log(data);\n\n    // this.setState({\n    //   temperature: data.main.temp,\n    //   city: data.name,\n    //   country: data.sys.country,\n    //   humidity: data.main.humidity,\n    //   description: data.weather[0].description,\n    //   error: \"\"\n    // });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Works?</h1>\n        <i className=\"wi wi-day-lightning\"></i>\n        <Form getWeather={this.getWeather}/>\n\n      </div>\n    )\n  }\n}\n\n// <Weather\n//   temperature = {this.state.temperature}\n//   city = {this.state.city}\n//   country = {this.state.country}\n//   humidity = {this.state.humidity}\n//   description = {this.state.description}\n//   error = {this.state.error}\n// />\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}