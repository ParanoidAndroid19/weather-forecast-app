{"ast":null,"code":"var _jsxFileName = \"/Users/simranbhake/Desktop/ProjectProgress/weather/src/components/CityInput.js\";\nimport React from 'react';\nimport './CityInput.css';\n\nclass CityInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    // here e corresponds to the input box (e.target.value) and the key pressed (e.keyCode)\n    const onKlickHandler = async e => {\n      e.persist(); //I don't know what tf is this\n      //both .which and .keyCode do the samething, but some browsers support only one. So here if e.which is true then use that, else use e.keyCode\n\n      const eventKey = e.which ? e.which : e.keyCode; //user input city\n\n      const city = e.target.value; // check if input contains only letters after Enter was pressed, 13 is the code for enter key\n\n      if (eventKey === 13) {\n        if (/^[a-zA-ZäöüÄÖÜß ]+$/.test(city)) {\n          // adding the className loading so that the loading gif is displayed when api call is being made\n          e.target.classList.add('loading');\n          if (await this.props.makeApiCall(city)) e.target.placeholder = 'Enter a City...';else e.target.placeholder = 'City was not found, try again...';\n        } // if input has any numbers\n        else e.target.placeholder = 'Please enter a valid city name...';\n\n        e.target.classList.remove('loading');\n        e.target.value = '';\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"input\", {\n      className: \"city-input\",\n      type: \"text\",\n      placeholder: \"Enter a City...\",\n      onKeyPress: onKlickHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default CityInput;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/weather/src/components/CityInput.js"],"names":["React","CityInput","Component","constructor","props","render","onKlickHandler","e","persist","eventKey","which","keyCode","city","target","value","test","classList","add","makeApiCall","placeholder","remove"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;;AAGA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,UAAMC,cAAc,GAAG,MAAMC,CAAN,IAAW;AAChCA,MAAAA,CAAC,CAACC,OAAF,GADgC,CACnB;AACb;;AACA,YAAMC,QAAQ,GAAGF,CAAC,CAACG,KAAF,GAAUH,CAAC,CAACG,KAAZ,GAAoBH,CAAC,CAACI,OAAvC,CAHgC,CAKhC;;AACA,YAAMC,IAAI,GAAGL,CAAC,CAACM,MAAF,CAASC,KAAtB,CANgC,CAQhC;;AACA,UAAIL,QAAQ,KAAK,EAAjB,EAAqB;AACnB,YAAI,sBAAsBM,IAAtB,CAA2BH,IAA3B,CAAJ,EAAsC;AACpC;AACAL,UAAAA,CAAC,CAACM,MAAF,CAASG,SAAT,CAAmBC,GAAnB,CAAuB,SAAvB;AAEA,cAAI,MAAM,KAAKb,KAAL,CAAWc,WAAX,CAAuBN,IAAvB,CAAV,EAAwCL,CAAC,CAACM,MAAF,CAASM,WAAT,GAAuB,iBAAvB,CAAxC,KACKZ,CAAC,CAACM,MAAF,CAASM,WAAT,GAAuB,kCAAvB;AACN,SAND,CAOA;AAPA,aAQKZ,CAAC,CAACM,MAAF,CAASM,WAAT,GAAuB,mCAAvB;;AAELZ,QAAAA,CAAC,CAACM,MAAF,CAASG,SAAT,CAAmBI,MAAnB,CAA0B,SAA1B;AACAb,QAAAA,CAAC,CAACM,MAAF,CAASC,KAAT,GAAiB,EAAjB;AACD;AACF,KAvBD;;AAyBA,wBACE;AACE,MAAA,SAAS,EAAC,YADZ;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,WAAW,EAAC,iBAHd;AAIE,MAAA,UAAU,EAAER,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD;;AAzCqC;;AA4CxC,eAAeL,SAAf","sourcesContent":["import React from 'react';\nimport './CityInput.css';\n\n\nclass CityInput extends React.Component {\n  constructor(props){\n    super(props)\n  }\n\n  render() {\n    // here e corresponds to the input box (e.target.value) and the key pressed (e.keyCode)\n    const onKlickHandler = async e => {\n      e.persist(); //I don't know what tf is this\n      //both .which and .keyCode do the samething, but some browsers support only one. So here if e.which is true then use that, else use e.keyCode\n      const eventKey = e.which ? e.which : e.keyCode;\n\n      //user input city\n      const city = e.target.value;\n\n      // check if input contains only letters after Enter was pressed, 13 is the code for enter key\n      if (eventKey === 13) {\n        if (/^[a-zA-ZäöüÄÖÜß ]+$/.test(city)) {\n          // adding the className loading so that the loading gif is displayed when api call is being made\n          e.target.classList.add('loading');\n\n          if (await this.props.makeApiCall(city)) e.target.placeholder = 'Enter a City...';\n          else e.target.placeholder = 'City was not found, try again...';\n        }\n        // if input has any numbers\n        else e.target.placeholder = 'Please enter a valid city name...';\n\n        e.target.classList.remove('loading');\n        e.target.value = '';\n      }\n    };\n\n    return (\n      <input\n        className='city-input'\n        type='text'\n        placeholder='Enter a City...'\n        onKeyPress={onKlickHandler}\n      />\n    );\n\n  }\n}\n\nexport default CityInput;\n"]},"metadata":{},"sourceType":"module"}