{"ast":null,"code":"var _jsxFileName = \"/Users/simranbhake/Desktop/ProjectProgress/weather/src/App.js\";\nimport React from 'react';\nimport './App.css'; // git project https://github.com/erikflowers/weather-icons\n\nimport 'weather-icons/css/weather-icons.css';\nconst API_KEY = \"ef7b3e775066b56ae79afbd0b3068de3\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateState = data => {\n      const city = data.city.name;\n      const days = [];\n      const dayIndices = this.getDayIndices(data);\n\n      for (let i = 0; i < 5; i++) {\n        days.push({\n          date: data.list[dayIndices[i]].dt_txt,\n          weather_desc: data.list[dayIndices[i]].weather[0].description,\n          icon: data.list[dayIndices[i]].weather[0].icon,\n          temp: data.list[dayIndices[i]].main.temp\n        });\n      }\n\n      this.setState({\n        city: city,\n        days: days\n      });\n    };\n\n    this.makeApiCall = async city => {\n      const api_data = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${API_KEY}`).then(resp => resp.json());\n\n      if (api_data.cod === '200') {\n        await this.updateState(api_data);\n        console.log(this.state.days);\n        return true;\n      } else return false;\n    };\n\n    this.getDayIndices = data => {\n      let dayIndices = [];\n      dayIndices.push(0);\n      let index = 0;\n      let tmp = data.list[index].dt_txt.slice(8, 10);\n\n      for (let i = 0; i < 4; i++) {\n        while (tmp === data.list[index].dt_txt.slice(8, 10) || data.list[index].dt_txt.slice(11, 13) !== '15') {\n          index++;\n        }\n\n        dayIndices.push(index);\n        tmp = data.list[index].dt_txt.slice(8, 10);\n      }\n\n      return dayIndices;\n    };\n\n    this.state = {\n      city: '',\n      // days contain today and next 4 days\n      // for each day there is: date, weather_desc, icon, temp\n      days: new Array(5)\n    };\n    this.handleChange = this.handleChange.bind(this);\n  } // creates the day objects and updates the state\n\n\n  handleChange(e) {\n    this.setState({\n      city: e.target.value\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \"Works?\"), /*#__PURE__*/React.createElement(\"i\", {\n      className: \"wi wi-day-lightning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"city\",\n      placeholder: \"City...\",\n      onChange: this.handleChange,\n      value: this.state.city,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }));\n  }\n\n} // <button onClick={this.makeApiCall.bind(this)}>Find</button>\n// <Weather\n//   temperature = {this.state.temperature}\n//   city = {this.state.city}\n//   country = {this.state.country}\n//   humidity = {this.state.humidity}\n//   description = {this.state.description}\n//   error = {this.state.error}\n// />\n\n\nexport default App;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/weather/src/App.js"],"names":["React","API_KEY","App","Component","constructor","props","updateState","data","city","name","days","dayIndices","getDayIndices","i","push","date","list","dt_txt","weather_desc","weather","description","icon","temp","main","setState","makeApiCall","api_data","fetch","then","resp","json","cod","console","log","state","index","tmp","slice","Array","handleChange","bind","e","target","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// git project https://github.com/erikflowers/weather-icons\nimport 'weather-icons/css/weather-icons.css';\n\nconst API_KEY = \"ef7b3e775066b56ae79afbd0b3068de3\";\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      city: '',\n      // days contain today and next 4 days\n      // for each day there is: date, weather_desc, icon, temp\n      days: new Array(5)\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  // creates the day objects and updates the state\n  updateState = data => {\n    const city = data.city.name;\n    const days = [];\n    const dayIndices = this.getDayIndices(data);\n\n    for (let i = 0; i < 5; i++) {\n      days.push({\n        date: data.list[dayIndices[i]].dt_txt,\n        weather_desc: data.list[dayIndices[i]].weather[0].description,\n        icon: data.list[dayIndices[i]].weather[0].icon,\n        temp: data.list[dayIndices[i]].main.temp\n      });\n    }\n\n    this.setState({\n      city: city,\n      days: days\n    });\n  };\n\n  // tries to make an API call with the given city name and triggers state update\n  makeApiCall = async city => {\n    const api_data = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${API_KEY}`\n    ).then(resp => resp.json());\n\n    if (api_data.cod === '200') {\n      await this.updateState(api_data);\n      console.log(this.state.days)\n      return true;\n    } else return false;\n  };\n\n  // returns array with Indices of the next five days in the list\n  // from the API data (every day at 12:00 pm)\n  getDayIndices = data => {\n    let dayIndices = [];\n    dayIndices.push(0);\n\n    let index = 0;\n    let tmp = data.list[index].dt_txt.slice(8, 10);\n\n    for (let i = 0; i < 4; i++) {\n      while (\n        tmp === data.list[index].dt_txt.slice(8, 10) ||\n        data.list[index].dt_txt.slice(11, 13) !== '15'\n      ) {\n        index++;\n      }\n      dayIndices.push(index);\n      tmp = data.list[index].dt_txt.slice(8, 10);\n    }\n    return dayIndices;\n  };\n\n\n  handleChange(e) {\n    this.setState({\n      city: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Works?</h1>\n        <i className=\"wi wi-day-lightning\"></i>\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" onChange={this.handleChange} value={this.state.city}/>\n      </div>\n    )\n  }\n}\n// <button onClick={this.makeApiCall.bind(this)}>Find</button>\n\n// <Weather\n//   temperature = {this.state.temperature}\n//   city = {this.state.city}\n//   country = {this.state.country}\n//   humidity = {this.state.humidity}\n//   description = {this.state.description}\n//   error = {this.state.error}\n// />\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}