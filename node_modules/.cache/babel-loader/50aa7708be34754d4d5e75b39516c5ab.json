{"ast":null,"code":"var _jsxFileName = \"/Users/simranbhake/Desktop/ProjectProgress/weather/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport CityInput from './components/CityInput';\nimport TodayWeather from './components/TodayWeather';\nimport WeekWeather from './components/WeekWeather'; // import Bbackground from './images/mspace.jpg';\n// git project https://github.com/erikflowers/weather-icons\n\nimport 'weather-icons/css/weather-icons.css';\nconst API_KEY = \"ef7b3e775066b56ae79afbd0b3068de3\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateState = data => {\n      // city is from the API data\n      const city = data.city.name;\n      const country = data.city.country;\n      const days = []; // const dayIndices = this.getDayIndices(data);\n      //\n      // for (let i = 0; i < 5; i++) {\n      //   days.push({\n      //     date: data.list[dayIndices[i]].dt_txt,\n      //     weather_desc: data.list[dayIndices[i]].weather[0].description,\n      //     icon: data.list[dayIndices[i]].weather[0].icon,\n      //     temp: data.list[dayIndices[i]].main.temp\n      //   });\n      // }\n      // This will give us readings for only 06:00pm UTC on each day\n\n      const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"));\n\n      for (let i = 0; i < 5; i++) {\n        days.push({\n          date: dailyData[i].dt_txt,\n          weather_desc: dailyData[i].weather[0].description,\n          icon: dailyData[i].weather[0].icon,\n          temp: dailyData[i].main.temp,\n          minTemp: dailyData[i].main.temp_min,\n          maxTemp: dailyData[i].main.temp_max\n        });\n      } // console.log(data);\n      // console.log(dailyData);\n\n\n      console.log(data); // console.log(typeof(days[0].date))\n\n      this.setState({\n        city: city,\n        country: country,\n        days: days\n      });\n    };\n\n    this.makeApiCall = async city => {\n      // this city passed is from the user entered input\n      const api_data = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${API_KEY}&units=metric`).then(resp => resp.json());\n\n      if (api_data.cod === '200') {\n        await this.updateState(api_data); // console.log(this.state.days)\n\n        return true;\n      } else return false;\n    };\n\n    this.state = {\n      city: '',\n      country: '',\n      // days contain today and next 4 days\n      // for each day there is: date, weather_desc, icon, temp\n      days: new Array(5)\n    }; // this.handleChange = this.handleChange.bind(this);\n  } // creates the day objects and updates the state\n\n\n  // returns array with Indices of the next five days in the list\n  // from the API data (every day at 12:00 pm)\n  // I have no idea how the code inside this component works!\n  // getDayIndices = data => {\n  //   let dayIndices = [];\n  //   dayIndices.push(0);\n  //\n  //   let index = 0;\n  //   let tmp = data.list[index].dt_txt.slice(8, 10);\n  //\n  //   for (let i = 0; i < 4; i++) {\n  //     while (\n  //       tmp === data.list[index].dt_txt.slice(8, 10) ||\n  //       data.list[index].dt_txt.slice(11, 13) !== '15'\n  //     ) {\n  //       index++;\n  //     }\n  //     dayIndices.push(index);\n  //     tmp = data.list[index].dt_txt.slice(8, 10);\n  //   }\n  //   return dayIndices;\n  // };\n  // handleChange(e) {\n  //   this.setState({\n  //     city: e.target.value\n  //   });\n  // }\n  render() {\n    const Forecast = () => {\n      // slice(1) is equivalent to days[1:], days array consists of 5 days total\n      const boxes = this.state.days.slice(1).map(day =>\n      /*#__PURE__*/\n      // console.log(day),\n      React.createElement(\"li\", {\n        key: day.date,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(WeekWeather, {\n        day: day,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      })));\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"weather-box-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 14\n        }\n      }, boxes);\n    }; // ./images/mspace.jpg\n    // style={{ backgroundImage: `url(require(\"../images/mspace.jpg\"))`}}\n    // const bg = './images/mspace.jpg'\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        backgroundImage: 'url(/mspace.jpg)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CityInput, {\n      city: this.state.city,\n      makeApiCall: this.makeApiCall.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(TodayWeather, {\n      data: this.state.days[0],\n      city: this.state.city,\n      country: this.state.country,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Forecast, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/weather/src/App.js"],"names":["React","CityInput","TodayWeather","WeekWeather","API_KEY","App","Component","constructor","props","updateState","data","city","name","country","days","dailyData","list","filter","reading","dt_txt","includes","i","push","date","weather_desc","weather","description","icon","temp","main","minTemp","temp_min","maxTemp","temp_max","console","log","setState","makeApiCall","api_data","fetch","then","resp","json","cod","state","Array","render","Forecast","boxes","slice","map","day","backgroundImage","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport CityInput from './components/CityInput';\nimport TodayWeather from './components/TodayWeather';\nimport WeekWeather from './components/WeekWeather';\n// import Bbackground from './images/mspace.jpg';\n\n// git project https://github.com/erikflowers/weather-icons\nimport 'weather-icons/css/weather-icons.css';\n\nconst API_KEY = \"ef7b3e775066b56ae79afbd0b3068de3\";\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      city: '',\n      country: '',\n      // days contain today and next 4 days\n      // for each day there is: date, weather_desc, icon, temp\n      days: new Array(5)\n    }\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  // creates the day objects and updates the state\n  updateState = data => {\n    // city is from the API data\n    const city = data.city.name;\n    const country = data.city.country;\n    const days = [];\n    // const dayIndices = this.getDayIndices(data);\n    //\n    // for (let i = 0; i < 5; i++) {\n    //   days.push({\n    //     date: data.list[dayIndices[i]].dt_txt,\n    //     weather_desc: data.list[dayIndices[i]].weather[0].description,\n    //     icon: data.list[dayIndices[i]].weather[0].icon,\n    //     temp: data.list[dayIndices[i]].main.temp\n    //   });\n    // }\n\n    // This will give us readings for only 06:00pm UTC on each day\n    const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\n\n    for (let i=0; i<5; i++) {\n      days.push({\n        date: dailyData[i].dt_txt,\n        weather_desc: dailyData[i].weather[0].description,\n        icon: dailyData[i].weather[0].icon,\n        temp: dailyData[i].main.temp,\n        minTemp: dailyData[i].main.temp_min,\n        maxTemp: dailyData[i].main.temp_max\n      })\n    }\n\n    // console.log(data);\n    // console.log(dailyData);\n\n    console.log(data);\n    // console.log(typeof(days[0].date))\n\n    this.setState({\n      city: city,\n      country: country,\n      days: days\n    });\n  };\n\n  // tries to make an API call with the given city name and triggers state update\n  makeApiCall = async city => {\n    // this city passed is from the user entered input\n    const api_data = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${API_KEY}&units=metric`\n    ).then(resp => resp.json());\n\n    if (api_data.cod === '200') {\n      await this.updateState(api_data);\n      // console.log(this.state.days)\n      return true;\n    } else return false;\n  };\n\n  // returns array with Indices of the next five days in the list\n  // from the API data (every day at 12:00 pm)\n  // I have no idea how the code inside this component works!\n  // getDayIndices = data => {\n  //   let dayIndices = [];\n  //   dayIndices.push(0);\n  //\n  //   let index = 0;\n  //   let tmp = data.list[index].dt_txt.slice(8, 10);\n  //\n  //   for (let i = 0; i < 4; i++) {\n  //     while (\n  //       tmp === data.list[index].dt_txt.slice(8, 10) ||\n  //       data.list[index].dt_txt.slice(11, 13) !== '15'\n  //     ) {\n  //       index++;\n  //     }\n  //     dayIndices.push(index);\n  //     tmp = data.list[index].dt_txt.slice(8, 10);\n  //   }\n  //   return dayIndices;\n  // };\n\n\n  // handleChange(e) {\n  //   this.setState({\n  //     city: e.target.value\n  //   });\n  // }\n\n  render() {\n    const Forecast = () => {\n      // slice(1) is equivalent to days[1:], days array consists of 5 days total\n      const boxes = this.state.days.slice(1).map(day => (\n        // console.log(day),\n        <li key={day.date}>\n          <WeekWeather day={day} />\n        </li>\n      ));\n\n      return <ul className='weather-box-list'>{boxes}</ul>;\n    };\n\n    // ./images/mspace.jpg\n    // style={{ backgroundImage: `url(require(\"../images/mspace.jpg\"))`}}\n    // const bg = './images/mspace.jpg'\n\n    return (\n      <div className=\"App\" style={{ backgroundImage: 'url(/mspace.jpg)'}}>\n        <header className=\"App-header\">\n          <CityInput city={this.state.city} makeApiCall={this.makeApiCall.bind(this)}/>\n          <TodayWeather data={this.state.days[0]} city={this.state.city} country={this.state.country}/>\n          <Forecast />\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}