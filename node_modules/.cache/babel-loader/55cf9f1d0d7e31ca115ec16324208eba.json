{"ast":null,"code":"import _regeneratorRuntime from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/simranbhake/Desktop/ProjectProgress/weather/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import'./App.css';import CityInput from'./components/CityInput';import TodayWeather from'./components/TodayWeather';import WeekWeather from'./components/WeekWeather';// import Bbackground from './images/mspace.jpg';\n// git project https://github.com/erikflowers/weather-icons\nimport'weather-icons/css/weather-icons.css';var API_KEY=\"ef7b3e775066b56ae79afbd0b3068de3\";var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.updateState=function(data,uunits){// city and country is from the API data, this is done to update the state in App using the data received from API called by CityInput\nvar city=data.city.name;var country=data.city.country;var days=[];var nota='°C';// const dayIndices = this.getDayIndices(data);\n//\n// for (let i = 0; i < 5; i++) {\n//   days.push({\n//     date: data.list[dayIndices[i]].dt_txt,\n//     weather_desc: data.list[dayIndices[i]].weather[0].description,\n//     icon: data.list[dayIndices[i]].weather[0].icon,\n//     temp: data.list[dayIndices[i]].main.temp\n//   });\n// }\nif(uunits==='imperial'){nota='°F';}else{nota='°C';}// This will give us readings for only 06:00pm UTC on each day\nvar dailyData=data.list.filter(function(reading){return reading.dt_txt.includes(\"18:00:00\");});for(var i=0;i<5;i++){days.push({date:dailyData[i].dt_txt,weather_desc:dailyData[i].weather[0].description,icon:dailyData[i].weather[0].icon,temp:dailyData[i].main.temp,notation:nota,minTemp:dailyData[i].main.temp_min,maxTemp:dailyData[i].main.temp_max});}console.log(data);// console.log(dailyData);\n// console.log(typeof(days[0].date))\n_this.setState({city:city,country:country,days:days,units:uunits});console.log(_this.state.days);};_this.makeApiCall=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(city,uunits){var api_data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(city,\"&APPID=\").concat(API_KEY,\"&units=\").concat(uunits)).then(function(resp){return resp.json();});case 2:api_data=_context.sent;if(!(api_data.cod==='200')){_context.next=9;break;}_context.next=6;return _this.updateState(api_data,uunits);case 6:return _context.abrupt(\"return\",true);case 9:return _context.abrupt(\"return\",false);case 10:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();_this.state={city:'',country:'',units:'metric',// days contain today and next 4 days\n// for each day there is: date, weather_desc, icon, temp\ndays:new Array(5)};// this.handleChange = this.handleChange.bind(this);\nreturn _this;}// creates the day objects and updates the state\n_createClass(App,[{key:\"render\",// This code is not required anymore\n// returns array with Indices of the next five days in the list\n// from the API data (every day at 12:00 pm)\n// I have no idea how the code inside this component works!\n// getDayIndices = data => {\n//   let dayIndices = [];\n//   dayIndices.push(0);\n//\n//   let index = 0;\n//   let tmp = data.list[index].dt_txt.slice(8, 10);\n//\n//   for (let i = 0; i < 4; i++) {\n//     while (\n//       tmp === data.list[index].dt_txt.slice(8, 10) ||\n//       data.list[index].dt_txt.slice(11, 13) !== '15'\n//     ) {\n//       index++;\n//     }\n//     dayIndices.push(index);\n//     tmp = data.list[index].dt_txt.slice(8, 10);\n//   }\n//   return dayIndices;\n// };\n//\n// handleChange(e) {\n//   this.setState({\n//     city: e.target.value\n//   });\n// }\nvalue:function render(){var _this2=this;var Forecast=function Forecast(){// slice(1) is equivalent to days[1:], days array consists of 5 days total\nvar boxes=_this2.state.days.slice(1).map(function(day){return/*#__PURE__*/ (// console.log(day),\nReact.createElement(\"li\",{key:day.date},/*#__PURE__*/React.createElement(WeekWeather,{day:day})));});return/*#__PURE__*/React.createElement(\"ul\",{className:\"weather-box-list\"},boxes);};// ./images/mspace.jpg\n// style={{ backgroundImage: `url(require(\"../images/mspace.jpg\"))`}}\n// this.state.days[0].icon\n// const test = \"tp\"\nvar imgUrl=require('./images/mspace.jpg');if(this.state.city){imgUrl=require(\"./images/\".concat(this.state.days[0].icon,\"_bg.jpg\"));}// here we change the background image based on the icons (weather condition)\nvar bgStyle={// backgroundImage: this.state.city ? `url(/backgrounds/${this.state.days[0].icon}_bg.jpg)` : `url(/backgrounds/mspace.jpg)`,\nbackgroundImage:\"url(\".concat(imgUrl,\")\"),backgroundSize:'cover',transition:'all 2s ease-out'};return/*#__PURE__*/React.createElement(\"div\",{className:\"App\",style:bgStyle},/*#__PURE__*/React.createElement(\"header\",{className:\"App-header\"},/*#__PURE__*/React.createElement(CityInput,{city:this.state.city,units:this.state.units,makeApiCall:this.makeApiCall.bind(this)}),/*#__PURE__*/React.createElement(TodayWeather,{data:this.state.days[0],city:this.state.city,country:this.state.country}),/*#__PURE__*/React.createElement(Forecast,null)));}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/Users/simranbhake/Desktop/ProjectProgress/weather/src/App.js"],"names":["React","CityInput","TodayWeather","WeekWeather","API_KEY","App","props","updateState","data","uunits","city","name","country","days","nota","dailyData","list","filter","reading","dt_txt","includes","i","push","date","weather_desc","weather","description","icon","temp","main","notation","minTemp","temp_min","maxTemp","temp_max","console","log","setState","units","state","makeApiCall","fetch","then","resp","json","api_data","cod","Array","Forecast","boxes","slice","map","day","imgUrl","require","bgStyle","backgroundImage","backgroundSize","transition","bind","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport CityInput from './components/CityInput';\nimport TodayWeather from './components/TodayWeather';\nimport WeekWeather from './components/WeekWeather';\n// import Bbackground from './images/mspace.jpg';\n\n// git project https://github.com/erikflowers/weather-icons\nimport 'weather-icons/css/weather-icons.css';\n\nconst API_KEY = \"ef7b3e775066b56ae79afbd0b3068de3\";\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      city: '',\n      country: '',\n      units: 'metric',\n      // days contain today and next 4 days\n      // for each day there is: date, weather_desc, icon, temp\n      days: new Array(5)\n    }\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  // creates the day objects and updates the state\n  updateState = (data, uunits) => {\n    // city and country is from the API data, this is done to update the state in App using the data received from API called by CityInput\n    const city = data.city.name;\n    const country = data.city.country;\n    const days = [];\n    var nota = '°C'\n    // const dayIndices = this.getDayIndices(data);\n    //\n    // for (let i = 0; i < 5; i++) {\n    //   days.push({\n    //     date: data.list[dayIndices[i]].dt_txt,\n    //     weather_desc: data.list[dayIndices[i]].weather[0].description,\n    //     icon: data.list[dayIndices[i]].weather[0].icon,\n    //     temp: data.list[dayIndices[i]].main.temp\n    //   });\n    // }\n\n    if(uunits === 'imperial') { nota = '°F' }\n    else { nota = '°C' }\n\n    // This will give us readings for only 06:00pm UTC on each day\n    const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\n\n    for (let i=0; i<5; i++) {\n      days.push({\n        date: dailyData[i].dt_txt,\n        weather_desc: dailyData[i].weather[0].description,\n        icon: dailyData[i].weather[0].icon,\n        temp: dailyData[i].main.temp,\n        notation: nota,\n        minTemp: dailyData[i].main.temp_min,\n        maxTemp: dailyData[i].main.temp_max\n      })\n    }\n\n    console.log(data);\n    // console.log(dailyData);\n    // console.log(typeof(days[0].date))\n\n    this.setState({\n      city: city,\n      country: country,\n      days: days,\n      units: uunits\n    });\n\n    console.log(this.state.days)\n  };\n\n  // tries to make an API call with the given city name and triggers state update,\n  // here city and uunits refer to the props updated by the child component CityInput, this is case of Child component passing updated state to parent component\n  makeApiCall = async(city, uunits) => {\n    // this city passed is from the user entered input\n    const api_data = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&APPID=${API_KEY}&units=${uunits}`\n    ).then(resp => resp.json());\n\n    if (api_data.cod === '200') {\n      await this.updateState(api_data, uunits);\n      // console.log(this.state.days)\n      return true;\n    } else return false;\n  };\n\n  // This code is not required anymore\n  // returns array with Indices of the next five days in the list\n  // from the API data (every day at 12:00 pm)\n  // I have no idea how the code inside this component works!\n  // getDayIndices = data => {\n  //   let dayIndices = [];\n  //   dayIndices.push(0);\n  //\n  //   let index = 0;\n  //   let tmp = data.list[index].dt_txt.slice(8, 10);\n  //\n  //   for (let i = 0; i < 4; i++) {\n  //     while (\n  //       tmp === data.list[index].dt_txt.slice(8, 10) ||\n  //       data.list[index].dt_txt.slice(11, 13) !== '15'\n  //     ) {\n  //       index++;\n  //     }\n  //     dayIndices.push(index);\n  //     tmp = data.list[index].dt_txt.slice(8, 10);\n  //   }\n  //   return dayIndices;\n  // };\n  //\n  // handleChange(e) {\n  //   this.setState({\n  //     city: e.target.value\n  //   });\n  // }\n\n\n  render() {\n    const Forecast = () => {\n      // slice(1) is equivalent to days[1:], days array consists of 5 days total\n      const boxes = this.state.days.slice(1).map(day => (\n        // console.log(day),\n        <li key={day.date}>\n          <WeekWeather day={day} />\n        </li>\n      ));\n\n      return <ul className='weather-box-list'>{boxes}</ul>;\n    };\n\n    // ./images/mspace.jpg\n    // style={{ backgroundImage: `url(require(\"../images/mspace.jpg\"))`}}\n    // this.state.days[0].icon\n\n    // const test = \"tp\"\n\n    var imgUrl = require('./images/mspace.jpg')\n\n    if(this.state.city){\n      imgUrl = require(`./images/${this.state.days[0].icon}_bg.jpg`)\n    }\n\n    // here we change the background image based on the icons (weather condition)\n    const bgStyle = {\n      // backgroundImage: this.state.city ? `url(/backgrounds/${this.state.days[0].icon}_bg.jpg)` : `url(/backgrounds/mspace.jpg)`,\n      backgroundImage: `url(${imgUrl})`,\n      backgroundSize: 'cover',\n      transition: 'all 2s ease-out'\n    }\n\n    return (\n      <div className=\"App\" style={bgStyle}>\n        <header className=\"App-header\">\n          <CityInput city={this.state.city} units={this.state.units} makeApiCall={this.makeApiCall.bind(this)}/>\n          <TodayWeather data={this.state.days[0]} city={this.state.city} country={this.state.country}/>\n          <Forecast />\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}